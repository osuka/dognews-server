"""
Django settings for dognews project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "af$r(dvh48ui1vku&sakegtr6vny5)hi6f^odamhr_fwkq!v=m"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.1.149", "dognewsserver.gatillos.com"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",  # <-- added, to expose rest api
    # "rest_framework.authtoken",  # enable token authentication
    "django_filters",  # to allow filtering on rest framework API
    "custom_admin_actions",  # additional row of actions for ModelAdmins
    "news",
    "drf_spectacular",  # <-- live documentation
    "django_extensions",  # <-- extends manage.py
    "dogauth",  # <-- custom user model
    "django.contrib.admin",  # <-- order is important for template overrides
    "admin_reorder",  # allows to change order in home page
]

AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)  # default

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "admin_reorder.middleware.ModelAdminReorderMiddleware",
]

ROOT_URLCONF = "dognews.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "dognews.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "dogauth.User"

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "public/static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = "public/media/"

# JWT authentication with djangorestframework-simplejwt

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


# Rest framework

REST_FRAMEWORK = {
    # enable pagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 50,
    "DEFAULT_SCHEMA_CLASS": "dogauth.views.SwaggerAutoSchema",
    # make default permissions to require auth
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.DjangoModelPermissions"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",  # Basic user:password
        "rest_framework.authentication.SessionAuthentication",  # cookie
        # "rest_framework.authentication.TokenAuthentication",  # Token XXXX (from post auth/login)
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # Bearer XXX (from post api/token/)
    ],
    # we disable the browseable API, not particularly useful
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    # Throttling: these apply site-wide
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "50/second",  # applies to all requests form unauntenthicated users
        "user": "100/min",  # applies to unauthenticated _and_ authenticated users
    },
}

# drf-spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": "Dognews Server API",
    "DESCRIPTION": "Dognews Server client API",
    "VERSION": "1.0.0",
    # https://drf-spectacular.readthedocs.io/en/latest/faq.html?highlight=imagefield#filefield-imagefield-is-not-handled-properly-in-the-schema
    "COMPONENT_SPLIT_REQUEST": True,
    # OTHER SETTINGS
}
# since django 3.2 this can be customized
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# layout of the admin home page
ADMIN_REORDER = {
    "admin": [
        {
            "app": "auth",
            "label": "Authentication and Authorisation",
            "models": (
                # "authtoken.TokenProxy",
                "dogauth.User",
                "auth.Group",
                "auth.Permission",
            ),
        },
        {
            "app": "news",
            "label": "Article Management",
            "models": (
                "news.Submission",
                # "news.ModeratedSubmission",
                "news.Vote",
                # "news.Article",
            ),
        },
    ],
}

# dict(
#     # Keep original label and models
#     "sites",
#     # Rename app
#     {"app": "auth", "label": "Authorisation"},
#     # Reorder app models
#     {"app": "auth", "models": ("dogauth.User", "auth.Group")},
#     # # Exclude models
#     # {"app": "auth", "models": ("auth.User",)},
#     # # Cross-linked models
#     # {"app": "auth", "models": ("auth.User", "sites.Site")},
#     # # models with custom name
#     # {
#     #     "app": "auth",
#     #     "models": (
#     #         "auth.Group",
#     #         {"model": "auth.User", "label": "Staff"},
#     #     ),
#     # },
# )
